#
# Apache v2 license
# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
version: '3.6'
services:
  ia-telegraf:
    user: "${TIMESERIES_UID}:${TIMESERIES_UID}"
    container_name: ia-telegraf
    hostname: ia-telegraf
    image: telegraf:1.34.3
    restart: unless-stopped
    depends_on:
      - ia-influxdb
    security_opt:
    - no-new-privileges
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    environment:
      no_proxy: "ia-influxdb,ia-mqtt-broker,ia-opcua-server,ia-time-series-analytics-microservice,${no_proxy}"
      NO_PROXY: "ia-influxdb,ia-mqtt-broker,ia-opcua-server,ia-time-series-analytics-microservice,${no_proxy}"
      MQTT_BROKER_HOST: "ia-mqtt-broker"
      INFLUX_SERVER: "ia-influxdb"
      INFLUXDB_PORT: 8086
      INFLUXDB_USERNAME: ${INFLUXDB_USERNAME}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_DBNAME: datain
      TELEGRAF_CONFIG_PATH: /etc/telegraf/Telegraf.conf
      OPCUA_SERVER: opc.tcp://ia-opcua-server:4840/freeopcua/server/
      LOG_LEVEL: ${LOG_LEVEL}
      TELEGRAF_INPUT_PLUGIN: ${TELEGRAF_INPUT_PLUGIN:-mqtt_consumer}
      # The Telegraf metric_batch_size specifies the number of metrics or data points 
      # that are grouped together and sent in a single batch to the InfluxDB.
      TELEGRAF_METRIC_BATCH_SIZE: 100
      TS_MS_SERVER_URL: http://ia-time-series-analytics-microservice:${KAPACITOR_PORT}
    entrypoint: ["/bin/sh", "-c", "/entrypoint.sh"]
    networks:
    - timeseries_network
    volumes:
    - ./configs/telegraf/entrypoint.sh:/entrypoint.sh
    - "./configs/telegraf/config/:/etc/telegraf"

  ia-influxdb:
    user: "${TIMESERIES_UID}:${TIMESERIES_UID}"
    image: influxdb:1.11.8
    container_name: ia-influxdb
    hostname: ia-influxdb
    restart: unless-stopped
    read_only: true
    security_opt:
    - no-new-privileges
    networks:
    - timeseries_network
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    environment:
      INFLUXDB_DB: datain
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_USER : ${INFLUXDB_USERNAME}
      INFLUXDB_USER_PASSWORD: ${INFLUXDB_PASSWORD}
      # The InfluxDB retention policy durations can be configured using a combination 
      # of time units such as hours(h), minutes(m), and seconds(s), eg., 1h0m0s for 1 hour.
      RETENTION_DURATION: 1h0m0s
      no_proxy: "ia-time-series-analytics-microservice,${no_proxy}"
      NO_PROXY: "ia-time-series-analytics-microservice,${no_proxy}"
      INFLUXDB_CONFIG_PATH: "/etc/influxdb/influxdb.conf"
      INFLUXDB_LOGGING_LEVEL: ${LOG_LEVEL}
      INFLUXDB_TLS_CIPHERS: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    volumes:
      # Mount for influxdb data directory and configuration
    - vol_influxdb_conf:/var/lib/influxdb:rw
    - ./configs/influxdb/config:/etc/influxdb
    - ./configs/influxdb/init-influxdb.sh:/docker-entrypoint-initdb.d/init-influxdb.sh
  
  ia-time-series-analytics-microservice:
    container_name: ia-time-series-analytics-microservice
    hostname: ia-time-series-analytics-microservice
    image: ${DOCKER_REGISTRY}${TIME_SERIES_ANALYTICS_IMAGE}${IMAGE_SUFFIX:+-${IMAGE_SUFFIX}}
    restart: unless-stopped
    depends_on:
      - ia-influxdb
      - ia-mqtt-broker
    security_opt:
    - no-new-privileges
    read_only: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9092/kapacitor/v1/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
    environment:
      no_proxy: "ia-time-series-analytics-microservice,ia-influxdb,ia-mqtt-broker,ia-opcua-server,localhost,model-registry,${no_proxy}"
      NO_PROXY: "ia-time-series-analytics-microservice,ia-influxdb,ia-mqtt-broker,ia-opcua-server,localhost,model-registry,${no_proxy}"
      KAPACITOR_PORT: ${KAPACITOR_PORT}
      INFLUX_SERVER: "ia-influxdb"
      KAPACITOR_INFLUXDB_0_USERNAME: ${INFLUXDB_USERNAME}
      KAPACITOR_INFLUXDB_0_PASSWORD: ${INFLUXDB_PASSWORD}
      PROFILING_MODE: "false"
      KAPACITOR_URL: http://ia-time-series-analytics-microservice:$KAPACITOR_PORT/
      KAPACITOR_UNSAFE_SSL: "true"
      KAPACITOR_INFLUXDB_0_URLS_0: http://ia-influxdb:8086/
      INFLUXDB_PORT: 8086
      KAPACITOR_LOGGING_LEVEL: ${LOG_LEVEL}
      INFLUXDB_DBNAME: datain
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
      SSL_CERT_FILE: /run/secrets/ca_certificate.pem
      MODEL_REGISTRY_URL: http://model-registry:8111
      REST_API_ROOT_PATH: "/ts-api"
    networks:
    - timeseries_network
    volumes:
    - "vol_temp_time_series_analytics_microservice:/tmp/"
    - ./configs/time-series-analytics-microservice/udfs/:/tmp/weld_anomaly_detector/udfs/
    - ./configs/time-series-analytics-microservice/tick_scripts/:/tmp/weld_anomaly_detector/tick_scripts/
    - ./configs/time-series-analytics-microservice/config.json:/app/config.json
    - ./configs/time-series-analytics-microservice/models/:/tmp/weld_anomaly_detector/models/
    - /dev/dri:/dev/dri
    - "/run/udev:/run/udev:ro"
    group_add:
    # render group ID for ubuntu 20.04 host OS
    - "109"
    # render group ID for ubuntu 22.04 host OS
    - "110"
    devices:
      # Following devices under /dev filesystem will be needed based on usecase
      # dri - GPU
    - "/dev/dri:/dev/dri"

  ia-grafana:
    image: grafana/grafana-oss:12.0.0-ubuntu
    container_name: ia-grafana
    hostname: ia-grafana
    user: "${TIMESERIES_UID}:${TIMESERIES_UID}"
    restart: unless-stopped
    read_only: true
    depends_on:
      - ia-influxdb
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    environment:
      no_proxy: "ia-influxdb,${no_proxy}"
      NO_PROXY: "ia-influxdb,${no_proxy}"
      INFLUX_SERVER: "ia-influxdb"
      GRAFANA_SERVER: '0.0.0.0'
      INFLUXDB_USERNAME: ${INFLUXDB_USERNAME}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_DB: datain
      GF_SECURITY_ADMIN_USER: ${VISUALIZER_GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${VISUALIZER_GRAFANA_PASSWORD}
      GF_PROVISIONING_ENABLE: "true"
      GF_PROVISIONING_DASHBOARDS: /etc/grafana/provisioning/dashboards
      GF_SERVER_PROTOCOL: http
      GF_LOG_LEVEL: ${LOG_LEVEL}
      GF_SERVER_SERVE_FROM_SUB_PATH: true
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_SECURITY_ALLOW_EMBEDDING: true
    networks:
    - timeseries_network
    volumes:
    - "vol_temp_grafana:/tmp"
    - vol_grafana_data:/var/lib/grafana
    - ./configs/grafana/:/etc/grafana/provisioning/dashboards
    - ./configs/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    
  ia-mqtt-broker:
    user: "${TIMESERIES_UID}:${TIMESERIES_UID}"
    container_name: ia-mqtt-broker
    hostname: ia-mqtt-broker
    read_only: true
    image: eclipse-mosquitto:2.0.21
    restart: unless-stopped
    depends_on:
      - ia-influxdb
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    networks:
    - timeseries_network
    volumes:
    - ./configs/mqtt-broker/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro

  ia-weld-data-simulator:
    build:
      context: $PWD/weld-data-simulator
      dockerfile: $PWD/weld-data-simulator/Dockerfile
      args:
        TIMESERIES_USER_NAME: ${TIMESERIES_USER_NAME}
        TIMESERIES_UID: ${TIMESERIES_UID}
    depends_on:
      - ia-mqtt-broker
      - mediamtx
    container_name: ia-weld-data-simulator
    hostname: ia-weld-data-simulator
    read_only: true
    image: ${DOCKER_REGISTRY}${WELD_SIMULATOR_IMAGE}${IMAGE_SUFFIX:+-${IMAGE_SUFFIX}}
    restart: unless-stopped
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    environment:
      MQTT_BROKER: ia-mqtt-broker
      MEDIAMTX_SERVER: mediamtx
      MEDIAMTX_PORT: 8554
      TS_TOPIC: "${TS_TOPIC}"
      RTSP_STREAM_NAME: live.stream
      no_proxy: "ia-mqtt-broker,ia-time-series-analytics-microservice,mediamtx,${no_proxy}"
      NO_PROXY: "ia-mqtt-broker,ia-time-series-analytics-microservice,mediamtx,${no_proxy}"
      TS_MS_SERVER: "ia-time-series-analytics-microservice"
      TS_MS_PORT: ${KAPACITOR_PORT}
      CONTINUOUS_SIMULATOR_INGESTION: ${CONTINUOUS_SIMULATOR_INGESTION}
      SIMULATION_TARGET_FPS: ${SIMULATION_TARGET_FPS}
      LOG_LEVEL: ${LOG_LEVEL}
    networks:
    - timeseries_network

  nginx:
    image: nginx:1.29.1-bookworm-perl
    container_name: nginx_proxy
    read_only: true
    user: "${TIMESERIES_UID}:${TIMESERIES_UID}"
    # entrypoint: ["sleep", "infinity"]
    command: >
     /bin/sh -c "/usr/local/bin/nginx-cert-gen.sh && exec nginx -g 'daemon off;'"
    environment:
      no_proxy: "ia-grafana,ia-time-series-analytics-microservice,ia-mqtt-broker,coturn,mediamtx,${no_proxy},${HOST_IP}"
      NO_PROXY: "ia-grafana,ia-time-series-analytics-microservice,ia-mqtt-broker,coturn,mediamtx,${no_proxy},${HOST_IP}"
      HOST_IP: ${HOST_IP}
      WHIP_SERVER_PORT: ${WHIP_SERVER_PORT}
    ports:
      - "${GRAFANA_PORT}:15443"   # HTTPS for Grafana and TS MS Rest API
      - "1883:1883" # MQTT TCP Proxy
    volumes:
      - ./configs/nginx/nginx.conf:/tmp/default.conf.template:ro
      - ./configs/nginx/nginx-cert-gen.sh:/usr/local/bin/nginx-cert-gen.sh:ro
      - vol_nginx_tmpfs:/opt/nginx/certs:rw
      - vol_nginx_tmpfs:/var/cache/nginx:rw
      - vol_nginx_tmpfs:/run:rw
      - vol_nginx_tmpfs:/etc/nginx/:rw
    networks:
      - timeseries_network
    depends_on:
      - ia-grafana
      - ia-time-series-analytics-microservice
      - ia-mqtt-broker
      - mediamtx
      - coturn
  ia-fusion-analytics:
    build:
      context: $PWD/fusion-analytics
      dockerfile: $PWD/fusion-analytics/Dockerfile
      args:
        TIMESERIES_USER_NAME: ${TIMESERIES_USER_NAME}
        TIMESERIES_UID: ${TIMESERIES_UID}
    container_name: ia-fusion-analytics
    image: ${DOCKER_REGISTRY}${FUSION_MODULE_IMAGE}${IMAGE_SUFFIX:+-${IMAGE_SUFFIX}}
    restart: unless-stopped
    environment:
      # MQTT Configuration
      MQTT_BROKER: ia-mqtt-broker
      MQTT_PORT: 1883
      no_proxy: "ia-mqtt-broker,ia-influxdb,${no_proxy}"
      NO_PROXY: "ia-mqtt-broker,ia-influxdb,${no_proxy}"
      # Topic Configuration
      VISION_TOPIC: vision_weld_defect_classification
      TS_TOPIC: ts_weld_anomaly_detection
      FUSION_TOPIC: fusion/anomaly_detection_results
      # Performance Configuration
      BUFFER_SIZE: 100
      TOLERANCE_NS: ${TOLERANCE_NS}
      INFLUXDB_HOST: ia-influxdb
      INFLUXDB_PORT: 8086
      INFLUXDB_DB: datain
      INFLUXDB_USERNAME: ${INFLUXDB_USERNAME}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD}
      PYTHONUNBUFFERED: 1
      FUSION_MODE: ${FUSION_MODE}
      LOG_LEVEL: ${LOG_LEVEL}
    depends_on:
      - ia-mqtt-broker
    networks:
      - timeseries_network
  dlstreamer-pipeline-server:
    image: ${DLSTREAMER_PIPELINE_SERVER_IMAGE}
    container_name: dlstreamer-pipeline-server
    hostname: dlstreamer-pipeline-server
    networks:
    - timeseries_network
    restart: unless-stopped
    security_opt:
    - no-new-privileges
    ports:
    - '8080:8080'
    - '8554:8554'
    depends_on:
      - ia-weld-data-simulator
    environment:
      AppName: "DLStreamerPipelineServer"
      ENABLE_WEBRTC: true
      WEBRTC_SIGNALING_SERVER: http://mediamtx:8889
      ENABLE_RTSP: true
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy},${HOST_IP},${RTSP_CAMERA_IP},otel-collector,mediamtx,model_registry,${MR_MINIO_HOSTNAME},ia-mqtt-broker
      NO_PROXY: ${no_proxy},${HOST_IP},${RTSP_CAMERA_IP},otel-collector,mediamtx,model_registry,${MR_MINIO_HOSTNAME},ia-mqtt-broker
      GST_DEBUG: "1"
      REST_SERVER_PORT: ${REST_SERVER_PORT}
      S3_STORAGE_HOST: ${MR_MINIO_HOSTNAME}
      S3_STORAGE_PORT: ${MR_MINIO_SERVER_PORT}
      S3_STORAGE_USER: ${MR_MINIO_ACCESS_KEY}
      S3_STORAGE_PASS: ${MR_MINIO_SECRET_KEY}
      SERVICE_NAME: "dlstreamer-pipeline-server"
      ENABLE_OPEN_TELEMETRY: true
      OTEL_COLLECTOR_HOST: ${OTEL_COLLECTOR_HOST}
      OTEL_COLLECTOR_PORT: ${OTEL_COLLECTOR_PORT}
      OTEL_EXPORT_INTERVAL_MILLIS: ${OTEL_EXPORT_INTERVAL_MILLIS}
      OPCUA_SERVER_IP: ${OPCUA_SERVER_IP}
      OPCUA_SERVER_PORT: ${OPCUA_SERVER_PORT}
      OPCUA_SERVER_USERNAME: ${OPCUA_SERVER_USERNAME}
      OPCUA_SERVER_PASSWORD: ${OPCUA_SERVER_PASSWORD}
      # Model Registry Microservice
      MR_URL: ${MR_URL}
      MR_SAVED_MODELS_DIR: ${MR_SAVED_MODELS_DIR}
      MR_REQUEST_TIMEOUT: ${MR_REQUEST_TIMEOUT}
      MR_VERIFY_CERT: ${MR_VERIFY_CERT}
      MQTT_HOST: ia-mqtt-broker
      MQTT_PORT: 1883
    volumes:
    - vol_pipeline_root:/var/cache/pipeline_root:uid=1999,gid=1999
    - /var/tmp:/var/tmp
    - ./configs/dlstreamer-pipeline-server/models:/home/pipeline-server/resources/models
    - ./configs/dlstreamer-pipeline-server/config.json:/home/pipeline-server/config.json
      # Following devices under /dev filesystem will be needed based on usecase
      # dri - GPU
      # USB camera devices
      # Selective mount can be done for deployment as mounting whole /dev is not recommended
    - "/dev:/dev"
    - "/tmp:/tmp"
      # volume mount the udev database with read-only permission,so the USB3 Vision interfaces can be enumerated correctly in the container
    - "/run/udev:/run/udev:ro"
      # Volume mount the directory in host system where the images are stored onto the container directory system.
      # - <absolute or relative path to the images directory>:/app/img_dir
      #- ../DLStreamerPipelineServer/udfs:/home/pipeline-server/udfs/
    group_add:
      # render group ID for ubuntu 20.04 host OS
    - "109"
      # render group ID for ubuntu 22.04 host OS
    - "110"
      # render group ID for ubuntu 24.04 host OS
    - "992"
    device_cgroup_rules:
      # Default run - device-cgroup-rule='c 189:* rmw'
      # Selective rules can be applied for deployment
    - 'c 189:* rmw'
    - 'c 209:* rmw'
    - 'a 189:* rwm'
    devices:
      # Following devices under /dev filesystem will be needed based on usecase
      # dri - GPU
      # USB camera devices
      # Selective mount can be done for deployment as mounting whole /dev is not recommended
    - "/dev:/dev"

  mediamtx:
    image: bluenviron/mediamtx:1.11.3
    container_name: mediamtx
    restart: unless-stopped
    ports:
      - ${WHIP_SERVER_PORT}:8889   # WebRTC
      - 9554:8554   # RTSP
      # - "8888:8888"   # HTTP API / Web UI
      # - "8890:8890"   # RTMP
    environment:
      - MTX_LOGLEVEL=info
      - MTX_RTSP=yes
      - MTX_RTMP=no
      - MTX_HLS=no
      - NO_PROXY=mediamtx,coturn,${no_proxy},${HOST_IP}
      - no_proxy=mediamtx,coturn,${no_proxy},${HOST_IP}
      # Path settings for cam1
      - MTX_PATHS_CAM1_PUBLISHUSER=publisher
      - MTX_PATHS_CAM1_PUBLISHPASS=pubpass
      - MTX_PATHS_CAM1_READUSER=viewer
      - MTX_PATHS_CAM1_READPASS=viewpass
      - MTX_WEBRTCTRACKGATHERTIMEOUT=20s
      - MTX_WEBRTC=yes
      - MTX_WEBRTCICESERVERS2_0_URL=turn:${HOST_IP}:${COTURN_UDP_PORT}
      - MTX_WEBRTCICESERVERS2_0_USERNAME=${MTX_WEBRTCICESERVERS2_0_USERNAME}
      - MTX_WEBRTCICESERVERS2_0_PASSWORD=${MTX_WEBRTCICESERVERS2_0_PASSWORD}
    networks:
    - timeseries_network
  
  coturn:
    image: coturn/coturn:4.7.0
    container_name: coturn
    ports:
      - "${COTURN_UDP_PORT}:3478"
      - "${COTURN_UDP_PORT}:3478/udp"
    command: ["-v"]  # Verbose mode for logging
    networks:
    - timeseries_network
networks:
  timeseries_network:
    driver: bridge

volumes:
  vol_influxdb_conf:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  vol_temp_time_series_analytics_microservice:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  vol_temp_grafana:
    name: "visualization_grafana_vol"
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  vol_grafana_data:
    name: "visualization_var_grafana_vol"
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  vol_pipeline_root:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs

  vol_nginx_tmpfs:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs