# Copyright (c) 2024 Intel Corporation.
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |-
{{ (.Files.Get "config/nginx/nginx.conf") | indent 4 }}
  generate_certs.sh: |
    #!/bin/sh
    set -e
    SSL_DIR="/etc/nginx/ssl"
    mkdir -p "$SSL_DIR"
    if ! command -v openssl >/dev/null 2>&1; then
        echo "Installing openssl..."
        apk add --no-cache openssl
    fi
    if [ ! -f "$SSL_DIR/server.crt" ] || [ ! -f "$SSL_DIR/server.key" ]; then
      echo "üîê Generating self-signed SSL certificate..."
      openssl req -x509 -nodes -days 365 \
        -newkey rsa:2048 \
        -keyout "$SSL_DIR/server.key" \
        -out "$SSL_DIR/server.crt" \
        -subj "/C=US/ST=CA/L=San Francisco/O=Intel/OU=Edge AI/CN=localhost"
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-reverse-proxy
  namespace: {{ .Values.namespace }}
spec:
  type: NodePort
  selector:
    app: nginx-reverse-proxy
  ports:
  - name: http
    port: {{ .Values.config.nginx.int.http_port }}
    targetPort: {{ .Values.config.nginx.int.http_port }}
    nodePort: {{ .Values.config.nginx.ext.http_port }}
  - name: https
    port: {{ .Values.config.nginx.int.https_port }}
    targetPort: {{ .Values.config.nginx.int.https_port }}
    nodePort: {{ .Values.config.nginx.ext.https_port }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-reverse-proxy
  name: deployment-nginx-reverse-proxy
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-reverse-proxy
  template:
    metadata:
      labels:
        app: nginx-reverse-proxy
    spec:
      initContainers:
      - name: generate-certs
        image: alpine/openssl:3.5.4
        command: 
        - /bin/sh
        - /scripts/generate_certs.sh
        volumeMounts:
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        - name: nginx-scripts
          mountPath: /scripts
      containers:
      - name: nginx-reverse-proxy
        image: {{ .Values.nginx.image }}:{{ .Values.nginx.imageTag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: {{ .Values.config.nginx.int.http_port }}
        - containerPort: {{ .Values.config.nginx.int.https_port }}
        env:
        - name: http_proxy
          value: ""
        - name: https_proxy
          value: ""
        - name: no_proxy
          value: ""
        - name: NO_PROXY
          value: ""
        volumeMounts:
        - name: nginx-conf
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: nginx-scripts
        configMap:
          name: nginx-conf
          items:
          - key: generate_certs.sh
            path: generate_certs.sh
            mode: 0755
      - name: nginx-ssl
        emptyDir: {}