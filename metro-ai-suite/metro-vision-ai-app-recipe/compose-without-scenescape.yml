services:
  broker:
    image: docker.io/library/eclipse-mosquitto:2.0.21
    container_name: broker
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy},${HOST_IP}
      - NO_PROXY=${no_proxy},${HOST_IP}
    volumes:
      - ./${SAMPLE_APP}/src/mosquitto/config:/mosquitto/config:ro
    networks:
      - app_network
    restart: on-failure:5

  dlstreamer-pipeline-server:
    image: ${DLSTREAMER_PIPELINE_SERVER_IMAGE}
    container_name: dlstreamer-pipeline-server
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy},${HOST_IP},mediamtx-server,otel-collector
      - NO_PROXY=${no_proxy},${HOST_IP},mediamtx-server,otel-collector
      - ENABLE_WEBRTC=true
      - WEBRTC_SIGNALING_SERVER=http://mediamtx-server:8889
      - APPEND_PIPELINE_NAME_TO_PUBLISHER_TOPIC=true
      - RUN_MODE=EVA
      - EMIT_SOURCE_AND_DESTINATION=true
      - REST_SERVER_PORT=8080
      - SERVICE_NAME=dlstreamer-pipeline-server
      - MQTT_HOST=broker
      - MQTT_PORT=1883
      - ENABLE_OPEN_TELEMETRY=true
      - OTEL_COLLECTOR_HOST=${OTEL_COLLECTOR_HOST}
      - OTEL_COLLECTOR_PORT=${OTEL_COLLECTOR_PORT}
      - OTEL_EXPORT_INTERVAL_MILLIS=${OTEL_EXPORT_INTERVAL_MILLIS}
      # NPU related environment variables
      - ZE_ENABLE_ALT_DRIVERS=libze_intel_npu.so
    volumes:
      - dlstreamer-pipeline-server-pipeline-root:/var/cache/pipeline_root:uid=1999,gid=1999
      - "./${SAMPLE_APP}/src/dlstreamer-pipeline-server/models:/home/pipeline-server/models"
      - "./${SAMPLE_APP}/src/dlstreamer-pipeline-server/videos:/home/pipeline-server/videos"
      - "./${SAMPLE_APP}/src/dlstreamer-pipeline-server/config.json:/home/pipeline-server/config.json"
      - "/run/udev:/run/udev:ro"
      - "/dev:/dev"
      - "/tmp:/tmp"
    group_add:
      - "109"
      - "110"
      - "992"
    device_cgroup_rules:
      - 'c 189:* rmw'
      - 'c 209:* rmw'
      - 'a 189:* rwm'
    devices:
      - "/dev:/dev"
    networks:
      - app_network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5

  mediamtx:
    image: bluenviron/mediamtx:1.11.3
    container_name: mediamtx-server
    environment:
      - MTX_LOGLEVEL=debug
      - MTX_RTSP=no
      - MTX_RTMP=no
      - MTX_HLS=no
      - MTX_SRT=no
      - MTX_WEBRTCICESERVERS2_0_URL=turn:$HOST_IP:3478
      - MTX_WEBRTCICESERVERS2_0_USERNAME=myusername
      - MTX_WEBRTCICESERVERS2_0_PASSWORD=mypassword
      - MTX_WEBRTCTRACKGATHERTIMEOUT=10s
      - MTX_WEBRTCLOCALTCPADDRESS=:8189
    networks:
      - app_network

  coturn:
    image: coturn/coturn:4.7
    container_name: coturn
    ports:
      - "3478:3478/udp"
    networks:
      - app_network

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx-reverse-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./${SAMPLE_APP}/src/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./${SAMPLE_APP}/src/nginx/ssl:/etc/nginx/ssl:ro"
    networks:
      - app_network
    depends_on:
      - dlstreamer-pipeline-server
      - grafana
      - node-red
      - mediamtx
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy},${HOST_IP}
      - NO_PROXY=${no_proxy},${HOST_IP}
    restart: on-failure:5

  grafana:
    image: grafana/grafana:11.5.4
    container_name: grafana
    volumes:
      - "./${SAMPLE_APP}/src/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/main.yml"
      - "./${SAMPLE_APP}/src/grafana/dashboards:/var/lib/grafana/dashboards"
      - "./${SAMPLE_APP}/src/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml"
    networks:
      - app_network
    environment:
      - GF_INSTALL_PLUGINS=grafana-mqtt-datasource
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - no_proxy=${no_proxy},${HOST_IP}
      - NO_PROXY=${no_proxy},${HOST_IP}
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_SECURITY_ALLOW_EMBEDDING=true

  node-red:
    image: nodered/node-red:3.1
    container_name: node-red
    environment:
      http_proxy: ${http_proxy}
      https_proxy: ${https_proxy}
      no_proxy: ${no_proxy}
    volumes:
      - "./${SAMPLE_APP}/src/node-red:/data"
      - "./${SAMPLE_APP}/src/dlstreamer-pipeline-server/videos:/data/public/videos"
    ipc: "none"
    entrypoint: [ "/bin/bash", "-c", "/data/install_package.sh && /usr/src/node-red/entrypoint.sh" ]
    user: root
    networks:
      - app_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      - HTTP_PROXY=${http_proxy}
      - HTTPS_PROXY=${https_proxy}
      - NO_PROXY=$no_proxy,localhost,127.0.0.1
    volumes:
      - ./${SAMPLE_APP}/configs/open_telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.route-prefix=/prometheus
      --web.external-url=https://${HOST_IP}/prometheus
    networks:
      - app_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.94.0
    container_name: otel-collector
    environment:
      HTTP_PROXY: ${http_proxy}
      HTTPS_PROXY: ${https_proxy}
      NO_PROXY: $no_proxy,prometheus,dlstreamer-pipeline-server,localhost,127.0.0.1
    volumes:
      - ./${SAMPLE_APP}/configs/open_telemetry/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml  # OpenTelemetry Collector config
    restart: always
    networks:
      - app_network

networks:
  app_network:
    driver: "bridge"

volumes:
  dlstreamer-pipeline-server-pipeline-root:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  prometheus_data:
    driver: local
