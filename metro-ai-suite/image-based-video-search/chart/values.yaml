# This file is autogenerated by katenary
#
# DO NOT EDIT IT BY HAND UNLESS YOU KNOW WHAT YOU ARE DOING
#
# If you want to change the content of this file, you should edit the
# compose file and run katenary again.
# If you need to override some values, you can do it in a override file
# and use the -f flag to specify it when running the helm command.



# broker configuration
broker:
  # key: broker.repository
  repository:
    # key: broker.repository.image
    image: docker.io/library/eclipse-mosquitto
    # key: broker.repository.tag
    tag: 2.0.20
  # key: broker.replicas
  replicas: 1
  # key: broker.nodeSelector
  nodeSelector: {}
  # key: broker.healthcheck
  healthcheck:
    enabled: true
    livenessProbe:
      exec:
        command:
          - mosquitto_sub
          - -t
          - "$$SYS/#"
          - -C
          - "1"
          - -i
          - "healthcheck"
          - -W
          - "3"
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      exec:
        command:
          - mosquitto_sub
          - -t
          - "$$SYS/#"
          - -C
          - "1"
          - -i
          - "healthcheck"
          - -W
          - "3"
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: broker.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: broker.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: broker.serviceAccount
  serviceAccount: ""

# dlstreamer pipeline server configuration
dlstreamerpipelineserver:
  # key: dlstreamerpipelineserver.repository
  repository:
    # key: dlstreamerpipelineserver.repository.image
    image: docker.io/intel/dlstreamer-pipeline-server
    # key: dlstreamerpipelineserver.repository.tag
    tag: 3.1.0-ubuntu22
  # key: dlstreamerpipelineserver.replicas
  replicas: 1
  # key: dlstreamerpipelineserver.nodeSelector
  nodeSelector: {}
  # key: dlstreamerpipelineserver.pipeline
  pipeline: config.cpu.json
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: dlstreamerpipelineserver.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: evdlstreamerpipelineserveram.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: dlstreamerpipelineserver.serviceAccount
  serviceAccount: ""

# mediamtx configuration
mediamtx:
  # key: mediamtx.repository
  repository:
    # key: mediamtx.repository.image
    image: docker.io/bluenviron/mediamtx
    # key: mediamtx.repository.tag
    tag: 1.10.0
  # key: mediamtx.replicas
  replicas: 1
  # key: mediamtx.nodeSelector
  nodeSelector: {}
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: mediamtx.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: mediamtx.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: mediamtx.serviceAccount
  serviceAccount: ""

# milvusdb configuration
milvusdb:
  # key: milvusdb.repository
  repository:
    # key: milvusdb.repository.image
    image: docker.io/milvusdb/milvus
    # key: milvusdb.repository.tag
    tag: v2.4.16
  # key: milvusdb.replicas
  replicas: 1
  # key: milvusdb.nodeSelector
  nodeSelector: {}
  # key: milvusdb.healthcheck
  healthcheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 9091
      initialDelaySeconds: 90   # start_period
      periodSeconds: 30         # interval
      timeoutSeconds: 20        # timeout
      failureThreshold: 3       # retries
    readinessProbe:
      httpGet:
        path: /healthz
        port: 9091
      initialDelaySeconds: 90
      periodSeconds: 30
      timeoutSeconds: 20
      failureThreshold: 3
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: milvusdb.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: milvusdb.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: milvusdb.serviceAccount
  serviceAccount: ""

# milvusui configuration
milvusui:
  # key: milvusui.repository
  repository:
    # key: milvusui.repository.image
    image: docker.io/zilliz/attu
    # key: milvusui.repository.tag
    tag: v2.4
  # key: milvusui.replicas
  replicas: 1
  # key: milvusui.nodeSelector
  nodeSelector: {}
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: milvusui.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: milvusui.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: milvusui.serviceAccount
  serviceAccount: ""

# streaming configuration
streaming:
  # key: streaming.repository
  repository:
    # key: streaming.repository.image
    image: docker.io/intel/streaming-pipeline
    # key: streaming.repository.tag
    tag: v1.0.2-pre-RC1
  # key: streaming.replicas
  replicas: 1
  # key: streaming.nodeSelector
  nodeSelector: {}
  # key: streaming.healthcheck
  healthcheck:
    command: "ffprobe -v error -rtsp_transport tcp rtsp://ibvs-mediamtx:8554/stream -show_streams || exit 1"
    interval: 30
    timeout: 10
    failureThreshold: 3
  restartPolicy: OnFailure
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: streaming.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: streaming.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: streaming.serviceAccount
  serviceAccount: ""

# app configuration
app:
  # key: app.repository
  repository:
    # key: app.repository.image
    image: docker.io/intel/image-based-video-search
    # key: app.repository.tag
    tag: v1.0.2-pre-RC1
  # key: app.replicas
  replicas: 1
  # key: app.nodeSelector
  nodeSelector: {}
  # key: app.healthcheck
  healthcheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /
        port: 3000
      initialDelaySeconds: 20
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: app.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: app.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: app.serviceAccount
  serviceAccount: ""

# featurematching configuration
featurematching:
  # key: featurematching.repository
  repository:
    # key: featurematching.repository.image
    image: docker.io/intel/feature-matching
    # key: featurematching.repository.tag
    tag: v1.0.2-pre-RC1
  # key: featurematching.replicas
  replicas: 1
  # key: featurematching.nodeSelector
  nodeSelector: {}
  # key: featurematching.healthcheck
  healthcheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /healthz
        port: 8000
      initialDelaySeconds: 10   # like start_period
      periodSeconds: 30         # interval
      timeoutSeconds: 5         # timeout
      failureThreshold: 3       # retries
    readinessProbe:
      httpGet:
        path: /healthz
        port: 8000
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
  # Resources allows you to specify the resource requests and limits for a service.
  # Resources are used to specify the amount of CPU and memory that
  # a container needs.
  #
  # e.g.
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # key: milvusui.resources
  resources: {}
  # imagePullPolicy allows you to specify a policy to cache or always pull an image.
  # You must provide a string value with one of the following values:
  # - Always       -> will always pull the image
  # - Never        -> will never pull the image, the image should be present on the node
  # - IfNotPresent -> will pull the image only if it is not present on the node
  # key: milvusui.imagePullPolicy
  imagePullPolicy: IfNotPresent
  # key: milvusui.serviceAccount
  serviceAccount: ""

# nginx reverse proxy configuration
nginx:
  repository:
    image: nginx
    tag: 1.27-alpine
  replicas: 1
  nodeSelector: {}
  resources: {}
  imagePullPolicy: IfNotPresent
  serviceAccount: ""
  healthcheck:
    enabled: true
    livenessProbe:
      httpGet:
        path: /nginx_healthz
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /nginx_healthz
        port: 80
      initialDelaySeconds: 10
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1

# imagePullSecrets allows you to specify a name of an image pull secret.
# You must provide a list of object with the name field set to the name of the
# e.g.
# pullSecrets:
# - name: regcred
# You are, for now, responsible for creating the secret.
pullSecrets: []


# httpProxy allows you to specify a http proxy for the containers.
# You must provide a string value with the following format:
# http://<proxy>:<port>
httpProxy: ""

# httpsProxy allows you to specify a https proxy for the containers.
# You must provide a string value with the following format:
# https://<proxy>:<port>
httpsProxy: ""

# noProxy allows you to specify a no proxy for the containers.
# You must provide a string value with the following format:
# <no_proxy>,<no_proxy>
noProxy: ""

# fullnameOverride allows you to specify a different prefix
# for the objects created by Kubernetes
fullnameOverride: "ibvs"

# vim: ft=yaml
